// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum GENDER {
  MALE
  FEMALE
}

model User {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  fullName       String
  bio            String?
  country        String
  city           String
  password       String
  phoneNum       String   @unique
  profilePic     String?
  birthDate      DateTime
  gender         GENDER   @default(MALE)
  role           ROLE     @default(STUDENT)
  isEmailConfirm Boolean  @default(false)

  instructor    Instructor?
  student       Student?
  suspendStates SuspendState[]
  blockStates   BlockState[]
}

model Admin {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  email      String  @unique
  password   String
  profilePic String?
  isDeleted  Boolean @default(false)

  suspendStates SuspendState[]
  blockStates   BlockState[]
}

model Instructor {
  id         String @id @default(uuid())
  userId     String @unique
  nationalID String
  cv         String
  rate       Float?

  Courses   Courses[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isDeleted Boolean   @default(false)
}

model Student {
  id             String  @id @default(uuid())
  userId         String  @unique
  isDeleted      Boolean @default(false)
  coursesProgres Json

  Courses Courses[]
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Courses {
  id           String @id @default(uuid())
  instructorId String
  studentId    String
  // TODO add course infos @kholoudxs55kh

  instructor Instructor @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  student    Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model SuspendState {
  id      String   @id @default(uuid())
  userId  String
  adminId String
  isValid Boolean  @default(false)
  reason  String?
  period  DateTime

  byAdmin Admin? @relation(fields: [adminId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlockState {
  id      String   @id @default(uuid())
  userId  String
  adminId String
  state   Boolean  @default(false)
  reason  String?
  period  DateTime

  byAdmin Admin? @relation(fields: [adminId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AppSettings {
  id           String @id @default(uuid())
  mainEmail    String
  contactEmail String
  contactPhone String
  aboutUs      String
  terms        String
  privacy      String
  logo         String
  favicon      String

  coverSlides Json
  socialLinks Json
}
