generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum GENDER {
  MALE
  FEMALE
}

enum EDUCATION_LEVEL {
  ELEMENTARY
  MIDDLE
  HIGH
  COLLEGE
  UNIVERSITY
  MASTER
  PHD
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fullName       String
  bio            String?
  country        String
  city           String
  password       String
  phoneNum       String      @unique
  profilePic     String?
  birthDate      DateTime
  gender         GENDER      @default(MALE)
  role           ROLE        @default(STUDENT)
  isEmailConfirm Boolean     @default(false)
  instructor     Instructor?
  student        Student?

  suspendStates SuspendState[]
  blockStates   BlockState[]
}

model Admin {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName  String
  lastName   String
  email      String  @unique
  password   String
  profilePic String?
  isDeleted  Boolean @default(false)

  coursesApproved Course[]
  suspendStates   SuspendState[]
  blockStates     BlockState[]
  News            News[]
  Events          Events[]
}

model Instructor {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId      String @unique
  nationalID  String
  cvLink      String
  averageRate Float?

  courses Course[]
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Student {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId         String          @unique
  educationLevel EDUCATION_LEVEL

  courseReviews CourseReview[]
  enrollments   CourseEnrollment[]
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CourseEnrollment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId  String
  studentId String
  progress  Json?

  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([courseId, studentId]) // TODO discuss this later [one student can enroll in one course only once]
}

model Course {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  instructorId   String
  adminId        String?
  categoryId     String
  subCategoryId  String?
  title          String
  description    String
  price          Float
  languages      String
  rate           Float?
  discount       Float?
  available      Boolean @default(false)
  skillsGained   String
  duration       String
  photo          String
  isDeleted      Boolean @default(false)
  certificate    String
  introVideo     String
  instructorRate Float
  courseRate     Float

  topics      Topic[]
  lectures    Lecture[]
  reviews     CourseReview[]
  enrollments CourseEnrollment[]
  createdBy   Admin?             @relation(fields: [adminId], references: [id], onDelete: Cascade)
  category    Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subCategory SubCategory?       @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  instructor  Instructor         @relation(fields: [instructorId], references: [id], onDelete: Cascade)
}

model Lecture {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId    String
  description String
  // TODO Using  Proxying Through Server: Instead of exposing the direct URL to the client
  // TODO Signed URLs: Use signed URLs to validation only for a certain time period and specific user.
  videoUrl    String
  duration    String
  isDeleted   Boolean @default(false)

  content LecturesContent[]
  course  Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model LecturesContent {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order      Int // order of leccture is matter
  materialId String
  lectureId  String
  content    String
  isDeleted  Boolean @default(false)

  material LecturesMaterials @relation(fields: [materialId], references: [id], onDelete: Cascade)
  lecture  Lecture           @relation(fields: [lectureId], references: [id], onDelete: Cascade)
}

model LecturesMaterials {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  content   String
  isDeleted Boolean @default(false)

  contents LecturesContent[]
}

model Topic {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId  String
  name      String
  isDeleted Boolean @default(false)

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CourseReview {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId  String
  studentId String
  comment   String
  isDeleted Boolean @default(false)

  courseRate     CourseRate[]
  instructorRate InstructorRate[]
  course         Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student        Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String
  photo       String
  isDeleted   Boolean @default(false)

  courses     Course[]
  subCategory SubCategory[]
}

model SubCategory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId  String
  name        String
  description String
  isDeleted   Boolean @default(false)

  courses  Course[]
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model CourseRate {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviewId  String
  rate      Float
  isDeleted Boolean @default(false)

  review CourseReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model InstructorRate {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviewId  String
  rate      Float
  isDeleted Boolean @default(false)

  review CourseReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model SuspendState {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  String
  adminId String
  isValid Boolean  @default(false)
  reason  String?
  period  DateTime

  byAdmin Admin? @relation(fields: [adminId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlockState {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  String
  adminId String
  state   Boolean  @default(false)
  reason  String?
  period  DateTime

  byAdmin Admin? @relation(fields: [adminId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AppSettings {
  id           String @id @default(uuid())
  mainEmail    String
  contactEmail String
  contactPhone String
  aboutUs      String
  terms        String
  privacy      String
  logo         String
  favicon      String
  coverSlides  Json
  socialLinks  Json
}

model News {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminId     String
  title       String
  subtitle    String
  description String
  images      Json?
  isDeleted   Boolean @default(false)
  isAvailable Boolean @default(false)
  cover       String

  createdBy Admin? @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Events {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminId     String
  title       String
  subtitle    String
  description String
  images      Json?
  startDate   DateTime
  endDate     DateTime
  isDeleted   Boolean  @default(false)
  isAvailable Boolean  @default(false)
  cover       String

  createdBy Admin? @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model ContactUs {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  email   String
  message String
  phone   String?
  isRead  Boolean @default(false)
}
