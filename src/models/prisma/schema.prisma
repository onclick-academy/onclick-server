generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  SUPER_ADMIN
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum ROLE_OF_INSTRUCTOR {
  PUBLISHER
  CONTERIBUTOR
}

enum GENDER {
  MALE
  FEMALE
}

enum NOTIFICATION_TYPE {
  COURSE_ENROLLMENT
  COURSE_COMPLETION
  NEW_COURSE_AVAILABLE
  ADMIN_ANNOUNCEMENT
  REVIEW_COURESE
  NEW_EVENT
  REQUEST_APPROVED
  REQUEST_DECLINED
  SUSPEND_USER
}

enum EDUCATION_LEVEL {
  ELEMENTARY
  MIDDLE
  HIGH
  COLLEGE
  UNIVERSITY
  MASTER
  PHD
}

enum TARGET_RATE {
  COURSE
  INSTRUCTOR
}

//Todo: Google Auth
model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName      String
  lastName       String
  username       String          @unique
  email          String          @unique
  phoneNum       String          @unique
  bio            String?
  password       String
  profilePic     String?
  birthDate      DateTime
  educationLevel EDUCATION_LEVEL @default(COLLEGE)
  gender         GENDER          @default(MALE)
  role           ROLE            @default(STUDENT)
  isEmailConfirm Boolean         @default(false)
  isDeleted      Boolean         @default(false)
  isAvailable    Boolean         @default(true)
  isApprovedAsInstructor Boolean @default(false)
  deletedAt      DateTime?

  suspendStates     SuspendState[]
  blockStates       BlockState[]
  WishList          WishList[]
  notifications     Notification[]
  ratings           Rating[]
  courseEnrollments CourseEnrollment[]
  approvedCourses   Course[]
  appSettings       AppSettings[]
  news              News[]
  events            Event[]
  courseOwners      CourseOwners[]
  devicesTokens     DevicesTokens[]
}

model DevicesTokens {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token                   String   @unique
  lastSuccessfullDelivery DateTime @default(now())
  userId                  String
  isEnabled               Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipientId String
  type        NOTIFICATION_TYPE
  title       String
  message     String?
  isRead      Boolean           @default(false)
  icon        String?
  link        String

  recipient User @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([recipientId, isRead])
}

model CourseEnrollment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String
  userId   String
  progress Json?

  course  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
}

model CourseOwners {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String
  userId   String
  role     ROLE_OF_INSTRUCTOR @default(PUBLISHER)

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
}

model Course {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminId     String?
  categoryId  String
  title       String
  description String
  price       Float
  rate        Float?
  discount    Float?
  isAvailable Boolean   @default(false)
  photo       String
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  certificate String?
  introVideo  String?
  isApproved  Boolean   @default(false)

  topics        Topic[]
  sections      Section[]
  enrollments   CourseEnrollment[]
  WishList      WishList[]
  approvedBy    User?              @relation(fields: [adminId], references: [id], onDelete: Cascade)
  subCategories SubCategory[]
  ratings       Rating[]
  CourseOwners  CourseOwners[]
  category      Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Lecture {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sectionId   String
  order       Int       @unique @default(autoincrement())
  title       String
  description String
  // TODO Using  Proxying Through Server: Instead of exposing the direct URL to the client
  // TODO Signed URLs: Use signed URLs to validation only for a certain time period and specific user.
  videoUrl    String
  thumbnail   String
  duration    String
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?

  section  Section             @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  material LecturesMaterials[]
}

model Section {
  id String @id @default(uuid())

  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title     String
  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  lectures Lecture[]
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model LecturesMaterials {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lectureContentId String
  title            String
  description      String
  isDeleted        Boolean   @default(false)
  deletedAt        DateTime?

  lectures Lecture @relation(fields: [lectureContentId], references: [id], onDelete: Cascade)
}

model Topic {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title     String    @unique
  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  courses     Course[]
  subCategory SubCategory[]
}

model Rating {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId       String
  targetId     String
  targetType   TARGET_RATE
  rate         Float
  comment      String?
  isDeleted    Boolean     @default(false)
  deletedAt    DateTime?
  courseId     String?
  instructorId String?

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId, targetType])
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String    @unique
  description String
  photo       String
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?

  subCategories SubCategory[]
  courses       Course[]
}

model SubCategory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId    String?
  categoryId  String
  name        String    @unique
  description String
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?

  topics   Topic[]
  courses  Course[]
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model SuspendState {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  String
  adminId String
  isValid Boolean  @default(false)
  reason  String?
  period  DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlockState {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  String
  adminId String
  state   Boolean  @default(false)
  reason  String?
  period  DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AppSettings {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminId      String?
  mainEmail    String
  contactEmail String
  contactPhone String
  aboutUs      String
  terms        String
  privacy      String
  logo         String
  favicon      String
  coverSlides  Json
  socialLinks  Json

  createdBy User?   @relation(fields: [userId], references: [id])
  userId    String?
}

model News {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminId     String
  title       String
  subtitle    String
  description String
  images      Json?
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  isAvailable Boolean   @default(false)
  cover       String

  createdBy User? @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Event {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminId     String
  title       String
  subtitle    String
  description String
  images      Json?
  startDate   DateTime
  endDate     DateTime
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  isAvailable Boolean   @default(true)
  cover       String

  createdBy User? @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model ContactUs {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  email   String
  message String
  phone   String?
  isRead  Boolean @default(false)
}

model WishList {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId  String
  userId    String
  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
